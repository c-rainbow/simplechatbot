// Code generated by MockGen. DO NOT EDIT.
// Source: repository\base_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	models "github.com/c-rainbow/simplechatbot/models"
	gomock "github.com/golang/mock/gomock"
)

// MockBaseRepositoryT is a mock of BaseRepositoryT interface
type MockBaseRepositoryT struct {
	ctrl     *gomock.Controller
	recorder *MockBaseRepositoryTMockRecorder
}

// MockBaseRepositoryTMockRecorder is the mock recorder for MockBaseRepositoryT
type MockBaseRepositoryTMockRecorder struct {
	mock *MockBaseRepositoryT
}

// NewMockBaseRepositoryT creates a new mock instance
func NewMockBaseRepositoryT(ctrl *gomock.Controller) *MockBaseRepositoryT {
	mock := &MockBaseRepositoryT{ctrl: ctrl}
	mock.recorder = &MockBaseRepositoryTMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBaseRepositoryT) EXPECT() *MockBaseRepositoryTMockRecorder {
	return m.recorder
}

// GetAllBots mocks base method
func (m *MockBaseRepositoryT) GetAllBots() []*models.Bot {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllBots")
	ret0, _ := ret[0].([]*models.Bot)
	return ret0
}

// GetAllBots indicates an expected call of GetAllBots
func (mr *MockBaseRepositoryTMockRecorder) GetAllBots() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllBots", reflect.TypeOf((*MockBaseRepositoryT)(nil).GetAllBots))
}

// GetAllChannels mocks base method
func (m *MockBaseRepositoryT) GetAllChannels() []*models.Channel {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllChannels")
	ret0, _ := ret[0].([]*models.Channel)
	return ret0
}

// GetAllChannels indicates an expected call of GetAllChannels
func (mr *MockBaseRepositoryTMockRecorder) GetAllChannels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllChannels", reflect.TypeOf((*MockBaseRepositoryT)(nil).GetAllChannels))
}

// GetAllChannelsForBot mocks base method
func (m *MockBaseRepositoryT) GetAllChannelsForBot(botID int64) []*models.Channel {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllChannelsForBot", botID)
	ret0, _ := ret[0].([]*models.Channel)
	return ret0
}

// GetAllChannelsForBot indicates an expected call of GetAllChannelsForBot
func (mr *MockBaseRepositoryTMockRecorder) GetAllChannelsForBot(botID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllChannelsForBot", reflect.TypeOf((*MockBaseRepositoryT)(nil).GetAllChannelsForBot), botID)
}

// GetCommand mocks base method
func (m *MockBaseRepositoryT) GetCommand(botID int64, channel, commandName string) *models.Command {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommand", botID, channel, commandName)
	ret0, _ := ret[0].(*models.Command)
	return ret0
}

// GetCommand indicates an expected call of GetCommand
func (mr *MockBaseRepositoryTMockRecorder) GetCommand(botID, channel, commandName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommand", reflect.TypeOf((*MockBaseRepositoryT)(nil).GetCommand), botID, channel, commandName)
}

// CreateNewBot mocks base method
func (m *MockBaseRepositoryT) CreateNewBot(botInfo *models.Bot) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewBot", botInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNewBot indicates an expected call of CreateNewBot
func (mr *MockBaseRepositoryTMockRecorder) CreateNewBot(botInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewBot", reflect.TypeOf((*MockBaseRepositoryT)(nil).CreateNewBot), botInfo)
}

// AddBotToChannel mocks base method
func (m *MockBaseRepositoryT) AddBotToChannel(botInfo *models.Bot, channelToAdd *models.Channel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBotToChannel", botInfo, channelToAdd)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddBotToChannel indicates an expected call of AddBotToChannel
func (mr *MockBaseRepositoryTMockRecorder) AddBotToChannel(botInfo, channelToAdd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBotToChannel", reflect.TypeOf((*MockBaseRepositoryT)(nil).AddBotToChannel), botInfo, channelToAdd)
}

// AddCommand mocks base method
func (m *MockBaseRepositoryT) AddCommand(channel string, commandToAdd *models.Command) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCommand", channel, commandToAdd)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCommand indicates an expected call of AddCommand
func (mr *MockBaseRepositoryTMockRecorder) AddCommand(channel, commandToAdd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCommand", reflect.TypeOf((*MockBaseRepositoryT)(nil).AddCommand), channel, commandToAdd)
}

// EditCommand mocks base method
func (m *MockBaseRepositoryT) EditCommand(channel string, commandToAdd *models.Command) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditCommand", channel, commandToAdd)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditCommand indicates an expected call of EditCommand
func (mr *MockBaseRepositoryTMockRecorder) EditCommand(channel, commandToAdd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditCommand", reflect.TypeOf((*MockBaseRepositoryT)(nil).EditCommand), channel, commandToAdd)
}

// DeleteCommand mocks base method
func (m *MockBaseRepositoryT) DeleteCommand(channel string, commandToAdd *models.Command) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCommand", channel, commandToAdd)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCommand indicates an expected call of DeleteCommand
func (mr *MockBaseRepositoryTMockRecorder) DeleteCommand(channel, commandToAdd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCommand", reflect.TypeOf((*MockBaseRepositoryT)(nil).DeleteCommand), channel, commandToAdd)
}

// ListCommands mocks base method
func (m *MockBaseRepositoryT) ListCommands(channel string) ([]*models.Command, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCommands", channel)
	ret0, _ := ret[0].([]*models.Command)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCommands indicates an expected call of ListCommands
func (mr *MockBaseRepositoryTMockRecorder) ListCommands(channel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCommands", reflect.TypeOf((*MockBaseRepositoryT)(nil).ListCommands), channel)
}
