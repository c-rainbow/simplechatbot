// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/c-rainbow/simplechatbot/api/helix/client.go

// Package mock_helix is a generated GoMock package.
package mock_helix

import (
	gomock "github.com/golang/mock/gomock"
	helix "github.com/nicklaw5/helix"
	reflect "reflect"
)

// MockHelixClientT is a mock of HelixClientT interface
type MockHelixClientT struct {
	ctrl     *gomock.Controller
	recorder *MockHelixClientTMockRecorder
}

// MockHelixClientTMockRecorder is the mock recorder for MockHelixClientT
type MockHelixClientTMockRecorder struct {
	mock *MockHelixClientT
}

// NewMockHelixClientT creates a new mock instance
func NewMockHelixClientT(ctrl *gomock.Controller) *MockHelixClientT {
	mock := &MockHelixClientT{ctrl: ctrl}
	mock.recorder = &MockHelixClientTMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHelixClientT) EXPECT() *MockHelixClientTMockRecorder {
	return m.recorder
}

// GetUsers mocks base method
func (m *MockHelixClientT) GetUsers(ids, usernames []string) ([]helix.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", ids, usernames)
	ret0, _ := ret[0].([]helix.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers
func (mr *MockHelixClientTMockRecorder) GetUsers(ids, usernames interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockHelixClientT)(nil).GetUsers), ids, usernames)
}

// GetUsersFollows mocks base method
func (m *MockHelixClientT) GetUsersFollows(fromID, toID string) ([]helix.UserFollow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersFollows", fromID, toID)
	ret0, _ := ret[0].([]helix.UserFollow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersFollows indicates an expected call of GetUsersFollows
func (mr *MockHelixClientTMockRecorder) GetUsersFollows(fromID, toID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersFollows", reflect.TypeOf((*MockHelixClientT)(nil).GetUsersFollows), fromID, toID)
}

// GetStreams mocks base method
func (m *MockHelixClientT) GetStreams(ids, usernames []string) ([]helix.Stream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStreams", ids, usernames)
	ret0, _ := ret[0].([]helix.Stream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStreams indicates an expected call of GetStreams
func (mr *MockHelixClientTMockRecorder) GetStreams(ids, usernames interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStreams", reflect.TypeOf((*MockHelixClientT)(nil).GetStreams), ids, usernames)
}

// MockInnerClientT is a mock of InnerClientT interface
type MockInnerClientT struct {
	ctrl     *gomock.Controller
	recorder *MockInnerClientTMockRecorder
}

// MockInnerClientTMockRecorder is the mock recorder for MockInnerClientT
type MockInnerClientTMockRecorder struct {
	mock *MockInnerClientT
}

// NewMockInnerClientT creates a new mock instance
func NewMockInnerClientT(ctrl *gomock.Controller) *MockInnerClientT {
	mock := &MockInnerClientT{ctrl: ctrl}
	mock.recorder = &MockInnerClientTMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInnerClientT) EXPECT() *MockInnerClientTMockRecorder {
	return m.recorder
}

// GetUsers mocks base method
func (m *MockInnerClientT) GetUsers(params *helix.UsersParams) (*helix.UsersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", params)
	ret0, _ := ret[0].(*helix.UsersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers
func (mr *MockInnerClientTMockRecorder) GetUsers(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockInnerClientT)(nil).GetUsers), params)
}

// GetUsersFollows mocks base method
func (m *MockInnerClientT) GetUsersFollows(params *helix.UsersFollowsParams) (*helix.UsersFollowsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersFollows", params)
	ret0, _ := ret[0].(*helix.UsersFollowsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersFollows indicates an expected call of GetUsersFollows
func (mr *MockInnerClientTMockRecorder) GetUsersFollows(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersFollows", reflect.TypeOf((*MockInnerClientT)(nil).GetUsersFollows), params)
}

// GetStreams mocks base method
func (m *MockInnerClientT) GetStreams(params *helix.StreamsParams) (*helix.StreamsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStreams", params)
	ret0, _ := ret[0].(*helix.StreamsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStreams indicates an expected call of GetStreams
func (mr *MockInnerClientTMockRecorder) GetStreams(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStreams", reflect.TypeOf((*MockInnerClientT)(nil).GetStreams), params)
}
